<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:Checkbox.kt$@OptIn(ExperimentalAnimationGraphicsApi::class) @Composable public fun Checkbox( checked: Boolean, onCheckedChange: (() -> Unit)?, modifier: Modifier = Modifier, enabled: Boolean = true, isError: Boolean = false, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, )</ID>
    <ID>CyclomaticComplexMethod:Scaffold.kt$@OptIn(ExperimentalLayoutApi::class) @Composable private fun ScaffoldLayout( topBar: @Composable () -> Unit, toast: @Composable () -> Unit, action: @Composable () -> Unit, content: @Composable (contentPadding: PaddingValues) -> Unit, contentWindowInsets: WindowInsets, )</ID>
    <ID>CyclomaticComplexMethod:Seat.kt$@Composable private fun ColumnScope.Seat( selected: Boolean, enabled: Boolean, isExtraLegroom: Boolean, content: @Composable () -> Unit, )</ID>
    <ID>CyclomaticComplexMethod:Slider.kt$@Composable private fun Track(enabled: Boolean, sliderPositions: SliderPositions)</ID>
    <ID>CyclomaticComplexMethod:TextField.kt$@Suppress("LongParameterList") @Composable internal fun TextField( value: String, onValueChange: (String) -> Unit, enabled: Boolean, readOnly: Boolean, label: @Composable (() -> Unit)?, error: @Composable (() -> Unit)?, info: @Composable (() -> Unit)?, additionalContent: @Composable (() -> Unit)?, placeholder: @Composable (() -> Unit)?, leadingIcon: @Composable (() -> Unit)?, onLeadingIconClick: (() -> Unit)?, trailingIcon: @Composable (() -> Unit)?, onTrailingIconClick: (() -> Unit)?, keyboardOptions: KeyboardOptions, keyboardActions: KeyboardActions, singleLine: Boolean, maxLines: Int, minLines: Int, visualTransformation: VisualTransformation, interactionSource: MutableInteractionSource, modifier: Modifier = Modifier, )</ID>
    <ID>ForbiddenComment:SelectField.kt$// TODO:</ID>
    <ID>ForbiddenComment:Typography.kt$Typography$// TODO: remove data class to allow maintain better binary compatibility</ID>
    <ID>FunctionNaming:SwipeableV2.kt$SwipeableV2Defaults$internal fun &lt;T> ReconcileAnimationOnAnchorChangeHandler( state: SwipeableV2State&lt;T>, animate: (target: T, velocity: Float) -> Unit, snap: (target: T) -> Unit )</ID>
    <ID>FunctionNaming:SwipeableV2.kt$SwipeableV2State.Companion$fun &lt;T : Any> Saver( animationSpec: AnimationSpec&lt;Float>, confirmValueChange: (T) -> Boolean, positionalThreshold: Density.(distance: Float) -> Float, velocityThreshold: Dp )</ID>
    <ID>LongMethod:Alert.kt$@Composable private fun Alert( icon: Painter?, title: @Composable ColumnScope.() -> Unit, actions: @Composable () -> Unit, content: @Composable ColumnScope.() -> Unit, suppressed: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:Checkbox.kt$@OptIn(ExperimentalAnimationGraphicsApi::class) @Composable public fun Checkbox( checked: Boolean, onCheckedChange: (() -> Unit)?, modifier: Modifier = Modifier, enabled: Boolean = true, isError: Boolean = false, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, )</ID>
    <ID>LongMethod:FieldContent.kt$FieldContentMeasurePolicy$override fun MeasureScope.measure( measurables: List&lt;Measurable>, constraints: Constraints, ): MeasureResult</ID>
    <ID>LongMethod:ListChoice.kt$@Composable private fun ListChoicePrimitive( onClick: (() -> Unit)?, icon: @Composable () -> Unit, description: @Composable () -> Unit, trailingIcon: @Composable () -> Unit, withSeparator: Boolean, interactionSource: MutableInteractionSource, title: @Composable () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:SegmentedSwitch.kt$@Composable public fun SegmentedSwitch( onOptionClick: (selectedIndex: Int) -> Unit, options: List&lt;@Composable () -> Unit>, selectedIndex: Int?, modifier: Modifier = Modifier, label: @Composable () -> Unit = {}, error: @Composable (() -> Unit)? = null, info: @Composable (() -> Unit)? = null, )</ID>
    <ID>LongMethod:SelectField.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable public fun &lt;T> SelectField( value: String, options: List&lt;T>, onOptionSelect: (T) -> Unit, modifier: Modifier = Modifier, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, label: @Composable (() -> Unit)? = null, error: @Composable (() -> Unit)? = null, info: @Composable (() -> Unit)? = null, placeholder: @Composable (() -> Unit)? = null, leadingIcon: @Composable (() -> Unit)? = null, singleLine: Boolean = true, maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE, minLines: Int = 1, optionContent: @Composable RowScope.(option: T) -> Unit, )</ID>
    <ID>LongMethod:Slider.kt$@Composable private fun Track(enabled: Boolean, sliderPositions: SliderPositions)</ID>
    <ID>LongMethod:Switch.kt$@Composable private fun BoxScope.SwitchImpl( checked: Boolean, enabled: Boolean, state: SwipeableV2State&lt;Boolean>, interactionSource: InteractionSource, )</ID>
    <ID>LongMethod:TextField.kt$@Suppress("LongParameterList") @Composable internal fun TextField( value: String, onValueChange: (String) -> Unit, enabled: Boolean, readOnly: Boolean, label: @Composable (() -> Unit)?, error: @Composable (() -> Unit)?, info: @Composable (() -> Unit)?, additionalContent: @Composable (() -> Unit)?, placeholder: @Composable (() -> Unit)?, leadingIcon: @Composable (() -> Unit)?, onLeadingIconClick: (() -> Unit)?, trailingIcon: @Composable (() -> Unit)?, onTrailingIconClick: (() -> Unit)?, keyboardOptions: KeyboardOptions, keyboardActions: KeyboardActions, singleLine: Boolean, maxLines: Int, minLines: Int, visualTransformation: VisualTransformation, interactionSource: MutableInteractionSource, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:Toast.kt$private fun Modifier.toastGesturesDetector( onPause: () -> Unit, onResume: () -> Unit, onDismissed: () -> Unit, ): Modifier</ID>
    <ID>LongMethod:TopAppBar.kt$@Composable internal fun TopAppBarLayout( title: @Composable () -> Unit, titleAlpha: Float, hideTitleSemantics: Boolean, navigationIcon: @Composable () -> Unit, actions: @Composable () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:TopAppBarLarge.kt$@Composable private fun TwoRowsTopAppBar( title: @Composable () -> Unit, largeTitle: @Composable () -> Unit, navigationIcon: @Composable () -> Unit, actions: @Composable () -> Unit, largeElevated: Boolean, elevation: Dp, scrollBehavior: TopAppBarScrollBehavior?, modifier: Modifier = Modifier, )</ID>
    <ID>MatchingDeclarationName:Toast.kt$ToastData</ID>
    <ID>MatchingDeclarationName:ToastHost.kt$ToastHostState</ID>
    <ID>NestedBlockDepth:SwipeableV2.kt$SwipeableV2State$private fun computeTarget( offset: Float, currentValue: T, velocity: Float ): T</ID>
  </CurrentIssues>
</SmellBaseline>
